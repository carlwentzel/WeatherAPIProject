from airflow import DAG

from datetime import timedelta, datetime

from airflow.providers.http.sensors.http import HttpSensor

import json

from airflow.providers.http.operators.http import SimpleHttpOperator

from airflow.operators.python import PythonOperator

import pandas as pd


def kelvin_to_fahrenheit(temp_in_kelvin):

    temp_in_fahrenheit = (temp_in_kelvin - 273.15) * (8/5) + 32

    return temp_in_fahrenheit


def save_raw_data(task_instance):

    #Extracted Api data into a pull to store into a variable data

    data = task_instance.xcom_pull(task_ids="extract_weather_data")

    # Presave the raw data into a CSV format

    raw_data_df = pd.json_normalize(data)  # Normalize the JSON data

    now = datetime.now()

    dt_string = now.strftime("%d%m%Y%H%M%S")

    raw_data_filename = f"raw_weather_data_{dt_string}.csv"

    raw_data_df.to_csv(raw_data_filename, index=False)


def transform_load_data(task_instance):

    #Extracted Api data into a pull to store into a variable data

    data = task_instance.xcom_pull(task_ids="extract_weather_data")

    #Column transformations

    city = data["name"]

    weather_description = data["weather"][0]['description']

    temp_farenheit = kelvin_to_fahrenheit(data["main"]["temp"])

    feels_like_farenheit= kelvin_to_fahrenheit(data["main"]["feels_like"])

    min_temp_farenheit = kelvin_to_fahrenheit(data["main"]["temp_min"])

    max_temp_farenheit = kelvin_to_fahrenheit(data["main"]["temp_max"])

    pressure = data["main"]["pressure"]

    humidity = data["main"]["humidity"]

    wind_speed = data["wind"]["speed"]

    time_of_record = datetime.utcfromtimestamp(data['dt'] + data['timezone'])

    sunrise_time = datetime.utcfromtimestamp(data['sys']['sunrise'] + data['timezone'])

    sunset_time = datetime.utcfromtimestamp(data['sys']['sunset'] + data['timezone'])

    #Creating a JSON format with new column variables / Key : Value

    transformed_data = {"City": city,

                            "Description": weather_description,

                            "Temperature (F)": temp_farenheit,

                            "Feels Like (F)": feels_like_farenheit,

                            "Minimun Temp (F)":min_temp_farenheit,

                            "Maximum Temp (F)": max_temp_farenheit,

                            "Pressure": pressure,

                            "Humidty": humidity,

                            "Wind Speed": wind_speed,

                            "Time of Record": time_of_record,

                            "Sunrise (Local Time)":sunrise_time,

                            "Sunset (Local Time)": sunset_time                        

                            }

    #Converting the JSON format into a list                    

    transformed_data_list = [transformed_data]

    #Converting the list into a dataframe

    df_data = pd.DataFrame(transformed_data_list)

    #AWS connection credentials

    aws_credentials = {"key" : "", "secret" : "", "token" : ""}

    now = datetime.now()

    dt_string = now.strftime("%d%m%Y%H%M%S")

    dt_string = 'current_weather_data_portland_' + dt_string

    df_data.to_csv(f"s3://<bucketname>/{dt_string}.csv", index=False, storage_options=aws_credentials)

    #Create a CSV

    ##df_data.to_csv(f"{dt_string}.csv", index=False)


default_args = {

    'owner': 'airflow',

    'depends_on_past': False,

    'start_date': datetime(2024, 9, 1),

    'email': ['carlwentzel@hotmail.com'],

    'email_on_failure': False,

    'email_on_retry': False,

    'retries': 2,

    'retry_delay': timedelta(minutes=2)

}


with DAG('weather_dag',

        default_args=default_args,

        schedule_interval='@daily',

        catchup=False) as dag:

        is_weather_api_ready = HttpSensor(

        task_id = 'is_weather_api_ready',

        http_conn_id = 'weathermap_api',

        endpoint = '/data/2.5/weather?q=<location>&APPID=<APIKEY>'

        )

        extract_weather_data = SimpleHttpOperator(

        task_id = 'extract_weather_data',

        http_conn_id = 'weathermap_api',

        endpoint = '/data/2.5/weather?q=<location>&APPID=<APIKEY>',

        method = 'GET',

        response_filter = lambda r: json.loads(r.text),

        log_response=True

        )

        raw_weather_data_to_csv = PythonOperator(

            task_id= 'raw_weather_data_to_csv',

            python_callable=save_raw_data

        )

        transform_load_weather_data = PythonOperator(

            task_id= 'transform_load_weather_data',

            python_callable=transform_load_data

        )

        is_weather_api_ready >> extract_weather_data >> raw_weather_data_to_csv >> transform_load_weather_data
